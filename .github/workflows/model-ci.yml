name: Model CI - Code Quality & Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'requirements.txt'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  MIN_COVERAGE: 80

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy

      - name: Run Ruff
        run: |
          echo "Running Ruff linter..."
          ruff check src/ tests/ --output-format=github

      - name: Check Black formatting
        run: |
          echo "Checking Black formatting..."
          black --check src/ tests/

      - name: Check import sorting
        run: |
          echo "Checking import sorting with isort..."
          isort --check-only src/ tests/

      - name: Type checking with mypy
        continue-on-error: true  # Type hints are gradual
        run: |
          echo "Running mypy type checker..."
          mypy src/ --ignore-missing-imports

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist faker hypothesis
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.MIN_COVERAGE }} \
            -n auto \
            --tb=short \
            -v

      - name: Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Coverage comment
        if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 70

  feature-tests:
    name: Feature Engineering Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pytest pandas numpy scikit-learn faker

      - name: Test feature transformations
        run: |
          pytest tests/test_features.py -v --tb=short

      - name: Test feature reproducibility
        run: |
          pytest tests/test_features.py::test_reproducibility -v

  inference-tests:
    name: Model Inference Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pytest scikit-learn joblib

      - name: Test inference pipeline
        run: |
          pytest tests/test_inference.py -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install safety
        run: pip install safety bandit

      - name: Check for known vulnerabilities
        run: |
          # Safety check para dependencias conocidas vulnerables
          pip install -r requirements.txt
          safety check --json || true

      - name: Bandit security linter
        run: |
          # Bandit para detectar issues de seguridad en código Python
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, feature-tests, inference-tests]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Feature Tests: ${{ needs.feature-tests.result }}"
          echo "Inference Tests: ${{ needs.inference-tests.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]] || \
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.feature-tests.result }}" != "success" ]] || \
             [[ "${{ needs.inference-tests.result }}" != "success" ]]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed!"
          fi
